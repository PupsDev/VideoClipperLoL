import requests
import json
import time
from queue import PriorityQueue

class Lolwrapper(object):

    REGION = 'euw1'
    URL_BASE = 'https://'+REGION+'.api.riotgames.com'

    _api_key = ""
    _region = ""
    _cache = {}


    LONG_LIMIT_INTERVAL = 120
    RATE_LIMIT_LONG = 100


    SHORT_LIMIT_INTERVAL = 1
    RATE_LIMIT_SHORT = 20

    shortLimitQueue = PriorityQueue()
    longLimitQueue = PriorityQueue()


    

    #Getters/Setters
    @property
    def api_key(self):
        return self._api_key

    @api_key.setter
    def api_key(self, key):
        self._api_key = key

    @property
    def region(self):
        return self._region

    @region.setter
    def region(self, r):
        self._region = r

    @property
    def cache(self):
        return self._cache

    @cache.setter
    def cache(self, c):
        self._cache = c

    #Constructor
    def __init__(self, key, c = {}):
        """
        Returns: A valid Pylol object given a valid API key, region code,
        and cache. Default values of 'na' for the North American region and
        an empty hash table for the cache are provided. Only the key field
        is required
        """
        self.api_key = key
        self.cache = c
        
    def updateLimitQueue(self,queue, interval, callLimit):
        while not queue.empty():
           # print(queue.qsize())
            timeSinceOldest = time.time()-queue.queue[0]
            if timeSinceOldest > interval:
                queue.get()
            elif queue.qsize() >= callLimit :
                if timeSinceOldest < interval :
                    
                    timesleep = int(interval - timeSinceOldest)
                    #print(timesleep)
                    print("Waiting "+ str(int((interval - timeSinceOldest)) + 1) + " second(s)..." )
                    time.sleep(timesleep+1)
            else:
                break
        
        queue.put(time.time())


    def request(self, param, special_case = False):
        """
        _request: Main method for requesting data via Riot's API. API calls format
                  the necessary data to form a call and use this "private" method
                  as an interface.
                  
        Returns: Parsed JSON data after forming an HTTP GET request to Riot Games.
                 The data returned depends on a specified parameter that is 
                 generated by the various methods below.
                 A valid URL is both formatted and sent with this method.
        """
        #Check if the GET parameters are already in the cache
        if param in self.cache:
            return self.cache[param]

        if special_case :
            URL = self.URL_BASE + param + "&api_key="+self.api_key
        else :
            URL = self.URL_BASE + param + "?api_key="+self.api_key
            

        self.updateLimitQueue(self.shortLimitQueue, self.SHORT_LIMIT_INTERVAL, self.RATE_LIMIT_SHORT)
        self.updateLimitQueue(self.longLimitQueue, self.LONG_LIMIT_INTERVAL, self.RATE_LIMIT_LONG)

        response = requests.get(URL)

        if response.status_code == 429:
            print("Too many requests, Error 429 !")
            print(response.headers)
            print("Waiting "+ response.headers['Retry-After']+ " second(s)..." )
            time.sleep(int(response.headers['Retry-After'])+1)
            response = requests.get(URL)
       # print (URL)
        if response.status_code != 200:
            print("ERROR "+ str(response.status_code))
            print(response.headers)
        else :
            self.cache[param] = response.json()
        return self.cache[param]

    def requestChallengerLeague(self):
        param="/lol/league/v4/challengerleagues/by-queue/RANKED_SOLO_5x5"
        return self.request(param)
    def requestSummonerData(self,summonerName):
        param = "/lol/summoner/v4/summoners/by-name/" + summonerName
        return self.request(param)

    ## Get an account's ranked match data by account ID
    def requestRankedData(self,Id):
        param = "/lol/league/v4/entries/by-summoner/" + Id
        return self.request(param)

    def requestMatchList(self,AccountId, queue="420", season="13"):
        param = "/lol/match/v4/matchlists/by-account/"+AccountId
        if queue :
            param  = param+ "?queue="+queue
        if season :
            param  = param+"&season="+season
            
        #+"?queue=420&season=13&api_key="+APIKey
        return self.request(param, True)

    def requestMatch(self,MatchId):
        param = "/lol/match/v4/matches/"+MatchId
        return self.request(param)
    def print(self, data):
      print(json.dumps(data,sort_keys=True, indent=2))
    
